#!/usr/bin/python3
#!-*- coding: utf8 -*-
import pygame as pg
import fileinput
import os
import stat
import random as random

st = os.stat('apres')
os.chmod('apres', st.st_mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)


from math import *

pg.init()                                 # inicialização do sistema

# altura e largura da arena, em células
H, W = 15,15

# largura da célula
l = 30
# altura da célula
L = 2*l/sqrt(3)

# cria a janela
scr = pg.display.set_mode((2*W*l+l,int(1.5*L*H+L/2)))
# só para simplificar, atualização da imagem
atu = pg.display.update


# pinta o fundo da janela
scr.fill((0,200,0))
atu()

def convert(i ,j):
    """
    Converte a coordenada (i,j) para a posição em pixels na janela
    """
    x = (1 + i%2)*l + 2*j*l
    y = 1.5*i*L + L
    return x,y

class Robo(pg.sprite.Sprite):
    """
    Representa um Robô, possui uma imagem
    """
    def __init__(s, img):
        """
        Construtor, img é o nome do arquivo com a imagem
        """
        pg.sprite.Sprite.__init__(s)
        s.image = pg.image.load(img)
        s.rect = s.image.get_rect()

    def draw(s, i,j):
        x, y = convert(i,j)


        # Desenha um símbolo do Robo embaixo do Cristal
        if (cristais[i][j] > 0):
            myfont = pg.font.SysFont("monospace", 15)
            # render text
            label = myfont.render("X", 1, (0,0,0))
            scr.blit(label, (x - 4, y + 17))

        # Desenha o robô na célula (i, j)
        else:          

            # fronteiras do sprite
            l0,h0,l1,h1 = s.rect

            # corrije a posição de acordo com o tamanho do sprite
            s.rect.topleft = [x-l1/2,y-h1/2]
            # desenha
            scr.blit(s.image, s.rect)

    
class cell:
    """
    Representa uma das células da arena
    """
    def __init__(s,i,j):
        """
        Construtor, i e j formam a coordenada
        """
        # Posição do centro
        s.cx, s.cy = convert(i,j)
        # Cor (pode ser passada para o construtor no futuro)
        s.cor = (200,200,200)

        # Vértices do hexágono
        s.pontos = (
            (s.cx,   s.cy-L),
            (s.cx+l, s.cy-L/2),
            (s.cx+l, s.cy+L/2),
            (s.cx,   s.cy+L),
            (s.cx-l, s.cy+L/2),
            (s.cx-l, s.cy-L/2),
            
)        
    def draw(s) :
        """
        Desenha a célula
        """
        pg.draw.polygon(scr, s.cor, s.pontos, 0)
        pg.draw.lines(scr, (0,0,0), True, s.pontos, 2)


    # Responsável por desenhar um label dentro dum losango numa célula
    def numero_cristais(s, n, x, y):
        myfont = pg.font.SysFont("monospace", 15)

        # render text
        label = myfont.render("%d" % n, 1, (255,255,255))
        scr.blit(label, (x - 4, y - 6))

    # Responsável por adicionar um cristal numa célula
    def cristais(s, n, i, j):
        # Não desenha o cristal se a quantidade é zero
        if (n < 1):
            return;

        # Coordenadas em pixels    
        x, y = convert(i, j)

        # Vértices do losango
        pontos = (
            (x - l * 1.5 / 4, y),
            (x, y - L * 0.5),
            (x + l * 1.5 / 4, y),
            (x, y + L * 0.5))

        # Cor do Losango
        cor = (100,100,200)
        # Desenha o losango
        pg.draw.polygon(scr, cor, pontos, 0)
        pg.draw.lines(scr, (0,0,0), True, pontos, 2)

        # Desenha o número de cristais dentro do losango
        s.numero_cristais(n, x, y)

    # Desenha uma base de imagem (img) na célula (i, j)
    def base(s, img, i, j):
        x, y = convert(i, j)

        s.image = pg.image.load(img)
        s.rect = s.image.get_rect()

        # fronteiras do sprite
        l0,h0,l1,h1 = s.rect

        # corrije a posição de acordo com o tamanho do sprite
        s.rect.topleft = [x-l1/2,y-h1/2]
        # desenha
        scr.blit(s.image, s.rect)


# Construção da matriz que representa a arena
arena = []
# Lista dos robôs definidos
robs = []
# Lista de cristais
cristais = []

for i in range(15):
    arena.append([])
    cristais.append([])
    for j in range(15):
        arena[i].append(cell(i,j))
        arena[i][j].draw()


        # Só para testes
        cristais[i].append([])
        n = random.randrange(0,100,1)
        if (n<80):
            cristais[i][j] = 0
        elif (n<95):
            cristais[i][j] = 1
        else:
            cristais[i][j] = 2      
    
        arena[i][j].cristais(cristais[i][j], i, j)
        if (random.randrange(0,5)==1 and cristais[i][j]==0):
            if (random.randrange(0,2)):
                robs.append(Robo("GILEAD_A.png"))
            else:
                robs.append(Robo("GILEAD_B.png"))

            robs[i].draw(i, j)
        else:
            if (random.randrange(0,40) == 7):
                if (cristais[i][j] < 1):
                    if (random.randrange(0,2)):
                        arena[i][j].base("BASE_A.png", i, j)
                    else:
                        arena[i][j].base("BASE_B.png", i, j)




# Atualiza a janela
atu()

# Leitura dos comandos pela entrada padrão ou de um arquivo
for line in fileinput.input():
    r = line.split()

    # linha começando com 'fim', termina o programa
    if r[0] == 'fim':
        break

    # linha começando com 'rob', inclui um robô,
    # o segundo argumento na linha é a imagem   
    if r[0] == 'rob':
        robs.append(Robo(r[1]))
        continue

    # comando para adição de cristais
    # Argumento 1: Quantidade
    # Argumento 2: Posição horizontal na Arena
    # Argumento 3: Posição vertical na Arena
    if r[0] == "cristal":
        arena[r[2]][r[3]].cristais(r[1], r[2], r[3])


    # comando para desenho de uma base
    # Argumento 1: Diretório da Imagem
    # Argumento 2: Posição horizontal na Arena
    # Argumento 3: Posição vertical na Arena
    if r[0] == "base":
        arena[r[2]][r[3]].base(r[1], r[2], r[3])

    # linha de movimentação:
    # robô, corrdenadas originais, coordenadas finais
    ri, oi, oj, di, dj = list(map(int, r))

    # redesenha a célula original (apaga o robô)
    if 0 <= oi  < W and 0 <= oj < H:
        arena[oi][oj].draw()
    # desenha o robô na célula de destino
    if 0 <= di  < W and 0 <= dj < H and ri < len(robs):
        robs[ri].draw(di,dj)

    # tempo de espera para atualização, apenas para testes
    pg.time.wait(100)

    atu()

pg.quit()
# Local variables:
# mode: python
# End:
